Line# 1: Token <INT> Lexeme int found
type_specifier	: INT
Line# 1: Token <ID> Lexeme func found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <INT> Lexeme int found
type_specifier	: INT
Line# 1: Token <ID> Lexeme n found
parameter_list  : type_specifier ID
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier	: INT
Line# 2: Token <ID> Lexeme i found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement:  var_declaration
statements:     statement
Line# 3: Token <IF> Lexeme if found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <ID> Lexeme n found
Line# 3: Token <RELOP> Lexeme == found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: term
Line# 3: Token <CONST_INT> Lexeme 0 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 3: Token <RPAREN> Lexeme ) found
simple_expression: term
rel_expression:   simple_expression RELOP simple_expression
logic_expression: rel_expression
expression:     logic_expression
Line# 3: Token <RETURN> Lexeme return found
Line# 3: Token <CONST_INT> Lexeme 0 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression: simple_expression
logic_expression: rel_expression
expression:     logic_expression
statement:    RETURN expression SEMICOLON
Line# 4: Token <ID> Lexeme i found
statement:    IF LPAREN expression RPAREN statement
statements:   statements statement
Line# 4: Token <ASSIGNOP> Lexeme = found
variable: ID
Line# 4: Token <ID> Lexeme n found
Line# 4: Token <SEMICOLON> Lexeme ; found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: term
rel_expression: simple_expression
logic_expression: rel_expression
expression:   variable ASSIGNOP logic_expression
expression_statement:   expression SEMICOLON
statement:    expression_statement
statements:   statements statement
Line# 5: Token <RETURN> Lexeme return found
Line# 5: Token <ID> Lexeme func found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme n found
Line# 5: Token <ADDOP> Lexeme - found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: term
Line# 5: Token <CONST_INT> Lexeme 1 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 5: Token <RPAREN> Lexeme ) found
simple_expression: simple_expression ADDOP term
rel_expression: simple_expression
logic_expression: rel_expression
arguments:    logic_expression
argument_list:  arguments
factor:   ID LPAREN argument_list RPAREN
unary_expression: factor
term:   unary_expression
Line# 5: Token <ADDOP> Lexeme + found
simple_expression: term
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <SEMICOLON> Lexeme ; found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: simple_expression ADDOP term
rel_expression: simple_expression
logic_expression: rel_expression
expression:     logic_expression
statement:    RETURN expression SEMICOLON
statements:   statements statement
Line# 6: Token <RCURL> Lexeme } found
compound_statement:   LCURL statements RCURL
	ScopeTable# 2
	1--> <n,ID, W. [BP + 6] > 
	7--> <i,ID, W.[BP-2] > 
	ScopeTable# 1
	10--> <func,FUNCTION,  > 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : unit
Line# 8: Token <INT> Lexeme int found
type_specifier	: INT
Line# 8: Token <ID> Lexeme func2 found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <INT> Lexeme int found
type_specifier	: INT
Line# 8: Token <ID> Lexeme n found
parameter_list  : type_specifier ID
Line# 8: Token <RPAREN> Lexeme ) found
Line# 8: Token <LCURL> Lexeme { found
Line# 9: Token <INT> Lexeme int found
type_specifier	: INT
Line# 9: Token <ID> Lexeme i found
Line# 9: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement:  var_declaration
statements:     statement
Line# 10: Token <IF> Lexeme if found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme n found
Line# 10: Token <RELOP> Lexeme == found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: term
Line# 10: Token <CONST_INT> Lexeme 0 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 10: Token <RPAREN> Lexeme ) found
simple_expression: term
rel_expression:   simple_expression RELOP simple_expression
logic_expression: rel_expression
expression:     logic_expression
Line# 10: Token <RETURN> Lexeme return found
Line# 10: Token <CONST_INT> Lexeme 0 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression: simple_expression
logic_expression: rel_expression
expression:     logic_expression
statement:    RETURN expression SEMICOLON
Line# 11: Token <ID> Lexeme i found
statement:    IF LPAREN expression RPAREN statement
statements:   statements statement
Line# 11: Token <ASSIGNOP> Lexeme = found
variable: ID
Line# 11: Token <ID> Lexeme n found
Line# 11: Token <SEMICOLON> Lexeme ; found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: term
rel_expression: simple_expression
logic_expression: rel_expression
expression:   variable ASSIGNOP logic_expression
expression_statement:   expression SEMICOLON
statement:    expression_statement
statements:   statements statement
Line# 12: Token <RETURN> Lexeme return found
Line# 12: Token <ID> Lexeme func found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <ID> Lexeme n found
Line# 12: Token <ADDOP> Lexeme - found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: term
Line# 12: Token <CONST_INT> Lexeme 1 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 12: Token <RPAREN> Lexeme ) found
simple_expression: simple_expression ADDOP term
rel_expression: simple_expression
logic_expression: rel_expression
arguments:    logic_expression
argument_list:  arguments
factor:   ID LPAREN argument_list RPAREN
unary_expression: factor
term:   unary_expression
Line# 12: Token <ADDOP> Lexeme + found
simple_expression: term
Line# 12: Token <ID> Lexeme i found
Line# 12: Token <SEMICOLON> Lexeme ; found
variable: ID
factor:     variable
unary_expression: factor
term:   unary_expression
simple_expression: simple_expression ADDOP term
rel_expression: simple_expression
logic_expression: rel_expression
expression:     logic_expression
statement:    RETURN expression SEMICOLON
statements:   statements statement
Line# 13: Token <RCURL> Lexeme } found
compound_statement:   LCURL statements RCURL
	ScopeTable# 3
	1--> <n,ID, W. [BP + 6] > 
	7--> <i,ID, W.[BP-2] > 
	ScopeTable# 1
	6--> <func2,FUNCTION,  > 
	10--> <func,FUNCTION,  > 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 15: Token <INT> Lexeme int found
type_specifier	: INT
Line# 15: Token <ID> Lexeme main found
Line# 15: Token <LPAREN> Lexeme ( found
Line# 15: Token <RPAREN> Lexeme ) found
Line# 15: Token <LCURL> Lexeme { found
Line# 16: Token <INT> Lexeme int found
type_specifier	: INT
Line# 16: Token <ID> Lexeme a found
Line# 16: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement:  var_declaration
statements:     statement
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <ASSIGNOP> Lexeme = found
variable: ID
Line# 17: Token <ID> Lexeme func found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <CONST_INT> Lexeme 7 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 17: Token <RPAREN> Lexeme ) found
simple_expression: term
rel_expression: simple_expression
logic_expression: rel_expression
arguments:    logic_expression
argument_list:  arguments
factor:   ID LPAREN argument_list RPAREN
unary_expression: factor
term:   unary_expression
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression: simple_expression
logic_expression: rel_expression
expression:   variable ASSIGNOP logic_expression
expression_statement:   expression SEMICOLON
statement:    expression_statement
statements:   statements statement
Line# 18: Token <PRINTLN> Lexeme println found
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <ID> Lexeme a found
Line# 18: Token <RPAREN> Lexeme ) found
Line# 18: Token <SEMICOLON> Lexeme ; found
statement:    PRINTLN LPAREN ID RPAREN SEMICOLON
statements:   statements statement
Line# 19: Token <RETURN> Lexeme return found
Line# 19: Token <CONST_INT> Lexeme 0 found
factor:   CONST_INT
unary_expression: factor
term:   unary_expression
Line# 19: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression: simple_expression
logic_expression: rel_expression
expression:     logic_expression
statement:    RETURN expression SEMICOLON
statements:   statements statement
Line# 20: Token <RCURL> Lexeme } found
compound_statement:   LCURL statements RCURL
	ScopeTable# 4
	10--> <a,ID, W.[BP-2] > 
	ScopeTable# 1
	2--> <main,type_specifier,  > 
	6--> <func2,FUNCTION,  > 
	10--> <func,FUNCTION,  > 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total lines: 22
Total errors: 0
